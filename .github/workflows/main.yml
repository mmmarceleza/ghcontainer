#------------------------------------------------------
#                        Header
#------------------------------------------------------
# Action name and Its triggers
name: Flow to build GitHub Actions CLI Docker Image
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  release:
    types:
      - created

#------------------------------------------------------
#                      Variables
#------------------------------------------------------
env:
  gh_version: "2.1.0"
  container_name: "ghcontainer"

#------------------------------------------------------
#                 Beginning of the jobs
#------------------------------------------------------
jobs:
  #----------------------------------------------------
  #              job 01 - Dockerfile Linter
  #----------------------------------------------------
  lint:
    name: Dockerfile Linter
    runs-on: ubuntu-20.04
    steps:
      #---------------------step 01-01-----------------
      - name: Checkout
        uses: actions/checkout@v2
      #---------------------step 01-02-----------------
      - uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: dockerfile

  #----------------------------------------------------
  #                 job 02 - Build Image
  #----------------------------------------------------
  build:
    name: Build Image
    needs: lint
    runs-on: ubuntu-20.04
    steps:
      #---------------------step 02-01-----------------
      - name: Checkout
        uses: actions/checkout@v2
      #---------------------step 02-02-----------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1        
      #---------------------step 02-03-----------------
      - name: Build and Export
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: ${{ env.gh_version }}
          tags: ${{ env.container_name }}:latest
          outputs: type=docker,dest=/tmp/${{ env.container_name }}.tar
      #---------------------step 02-04-----------------
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.container_name }}
          path: /tmp/${{ env.container_name }}.tar

  #----------------------------------------------------
  #              job 03 - Container Test
  #----------------------------------------------------
  test:
    name: Container Test
    needs: build
    runs-on: ubuntu-20.04
    steps:
      #---------------------step 03-01-----------------
      - name: Checkout code
        uses: actions/checkout@v2
      #---------------------step 03-02-----------------
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.container_name }}
          path: /tmp
      #---------------------step 03-03-----------------
      - name: Load Image
        run: |
          docker load --input /tmp/${{ env.container_name }}.tar
      #---------------------step 03-04-----------------
      - name: Teste
        run: |
          # Create an env with the path to a temporary file
          export FILE_GH_VERSION=$(mktemp)
          # Run the new container to get Its version and save in the temporary file
          docker run --rm ${{ env.container_name }} --version | paste -s > $FILE_GH_VERSION
          echo $FILE_GH_VERSION
          # Test if the version is equivalent to the variable "gh_version" in this CI file
          if [ $(awk '{print $3}' $FILE_GH_VERSION) = {{ env.gh_version }} ]; then echo "A versão do container está correta"; fi

  #----------------------------------------------------
  #            job 04 - Image Scan with Trivy
  #----------------------------------------------------
  scan:
    name: Image Scan
    needs: test
    runs-on: ubuntu-20.04
    steps:
      #---------------------step 04-01-----------------
      - name: Checkout code
        uses: actions/checkout@v2
      #---------------------step 04-02-----------------
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.container_name }}
          path: /tmp
      #---------------------step 04-03-----------------
      - name: Load Image
        run: |
          docker load --input /tmp/${{ env.container_name }}.tar
      #---------------------step 04-04-----------------
      - name: Image Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "gh-image"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

  #----------------------------------------------------
  #      job 05 - Build and Push to Docker Hub
  #----------------------------------------------------
  push:
    name: Publish the Image
    if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
    needs: scan
    runs-on: ubuntu-20.04
    steps:
      #---------------------step 05-01-----------------
      - name: Checkout
        uses: actions/checkout@v2
      #---------------------step 05-02-----------------
      - name: Login DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #---------------------step 05-03-----------------
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.container_name }}
          path: /tmp
      #---------------------step 05-04-----------------
      - name: Load Image
        run: |
          docker load --input /tmp/${{ env.container_name }}.tar
      #---------------------step 05-05-----------------
      - name: Tag and push image to Docker Hub
        run: |
          docker tag ${{ env.container_name }}:latest ${{ secrets.DOCKERHUB_ORGANIZATION }}/${{ env.container_name }}:${{ env.gh_version }}
          docker push ${{ secrets.DOCKERHUB_ORGANIZATION }}/${{ env.container_name }}:${{ env.gh_version }}
      #---------------------step 05-06-----------------
      - name: Digest
        run: echo "GitHub CLI container version is -> ${{ env.gh_version }}"
